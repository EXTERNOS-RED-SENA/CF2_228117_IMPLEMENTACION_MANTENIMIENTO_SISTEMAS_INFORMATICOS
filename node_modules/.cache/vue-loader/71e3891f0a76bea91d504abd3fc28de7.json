{"remainingRequest":"/home/runner/work/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/src/views/Tema2.vue?vue&type=template&id=150a3054&lang=pug","dependencies":[{"path":"/home/runner/work/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/src/views/Tema2.vue","mtime":1732755647084},{"path":"/home/runner/work/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED2_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDIKICAgICAgaDEgRnVuZGFtZW50b3MgZGUgaW5zdGFsYWNpw7NuCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAuY29sLWxnLWF1dG8ucHQtbGctMC5wdC1tZC00CiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMTUucG5nJyBhbHQ9JycpCiAgICAgIC5jb2wucHQtbGctMC5wdC1tZC00CiAgICAgICAgcC5tYi0wIExhIGluc3RhbGFjacOzbiBkZSB1biBzaXN0ZW1hIGRlIGNhYmxlYWRvIGVzdHJ1Y3R1cmFkbyByZXF1aWVyZSBkZSB1biBjb25vY2ltaWVudG8gaW50ZWdyYWwgZGUgbG9zIGRpZmVyZW50ZXMgdGlwb3MgZGUgY2FibGVzLCBoZXJyYW1pZW50YXMgZXNwZWPDrWZpY2FzLCBtYXRlcmlhbGVzIG5lY2VzYXJpb3MsIHkgbG9zIHByb2NlZGltaWVudG9zIGNvcnJlY3RvcyBwYXJhIGxsZXZhciBhIGNhYm8gdW5hIGluc3RhbGFjacOzbiBkZSBjYWxpZGFkIHkgY29uZm9ybWUgYSBsYSBub3JtYXRpdmEuIEVzdGUgYXBhcnRhZG8gY3VicmUgZGVzZGUgbGEgc2VsZWNjacOzbiBkZSBjb21wb25lbnRlcyBoYXN0YSBsYSBhcGxpY2FjacOzbiBkZSBwcsOhY3RpY2FzIHF1ZSBnYXJhbnRpemFuIHVuYSBpbnN0YWxhY2nDs24gc2VndXJhIHkgZWZlY3RpdmEuIExlY3R1cmEgZGUgZGF0b3MgZGVzZGUgYXJjaGl2b3MgZXh0ZXJub3MuCiAgICAgIC5jb2wtbGctYXV0by5wdC1sZy0wLnB0LW1kLTQKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8xNi5wbmcnIGFsdD0nJykgIAogICAgICAKICAgIFNlcGFyYWRvciAKICAgICN0XzJfMS50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIGgyIDIuMSBUaXBvcyBkZSBjYWJsZWFkbyB5IGNhdGVnb3LDrWFzCgogICAgcC5tYi01IEVuIGVsIGNhYmxlYWRvIGVzdHJ1Y3R1cmFkbywgZXhpc3RlbiBkaWZlcmVudGVzIHRpcG9zIGRlIGNhYmxlcyB5IGNhdGVnb3LDrWFzLCBjYWRhIHVubyBkaXNlw7FhZG8gcGFyYSBzYXRpc2ZhY2VyIGRpc3RpbnRvcyByZXF1aXNpdG9zIGRlIHJlbmRpbWllbnRvIHkgYXBsaWNhY2lvbmVzIGVzcGVjw61maWNhcyBlbiByZWRlcyBkZSBkYXRvcyB5IHRlbGVjb211bmljYWNpb25lcy4gQ29ub2NlciBsYXMgY2FyYWN0ZXLDrXN0aWNhcyBkZSBjYWRhIHRpcG8gcGFyYSBwb2RlciBzZWxlY2Npb25hciBlbCBtw6FzIGFkZWN1YWRvIHNlZ8O6biBsYXMgbmVjZXNpZGFkZXMgZGVsIHNpc3RlbWEgeSBjdW1wbGlyIGNvbiBsb3MgZXN0w6FuZGFyZXMgZGUgcmVuZGltaWVudG8uCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgLmNvbC1sZy0zLm15LWxnLTAubXktMwogICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzE3LnBuZycgYWx0PScnKSAgICAgIAogICAgICAuY29sLWxnLTkubXktbGctMC5teS0zCiAgICAgICAgQWNvcmRpb25BKHRpcG89ImEiIGNsYXNlLXRhcmpldGE9InRhcmpldGEgYmczIikKICAgICAgICAgIGRpdih0aXR1bG89IkNhYmxlIGRlIHBhciB0cmVuemFkbyAoVVRQLCBGVFAsIFNUUCkiKQogICAgICAgICAgICBwIEVzIGVsIG3DoXMgY29tw7puIGVuIGluc3RhbGFjaW9uZXMgZGUgY2FibGVhZG8gZXN0cnVjdHVyYWRvLCBlc3BlY2lhbG1lbnRlIHBhcmEgcmVkZXMgbG9jYWxlcy4gRGVudHJvIGRlIGVzdGEgY2F0ZWdvcsOtYSwgc2UgZW5jdWVudHJhbiBsb3MgY2FibGVzOiAKICAgICAgICAgICAgdWwubGlzdGEtdWwuZmEtdWwucHMtNAogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBVVFAgKHBhciB0cmVuemFkbyBubyBibGluZGFkbyksIAogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBGVFAgKHBhciB0cmVuemFkbyBjb24gYmxpbmRhamUgZGUgbMOhbWluYSkuCiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIFNUUCAocGFyIHRyZW56YWRvIGNvbiBibGluZGFqZSB0b3RhbCkuCiAgICAgICAgICAgIHAgRWwgYmxpbmRhamUgYXl1ZGEgYSByZWR1Y2lyIGxhcyBpbnRlcmZlcmVuY2lhcyBlbGVjdHJvbWFnbsOpdGljYXMgKEVNSSksIGhhY2nDqW5kb2xvcyBhZGVjdWFkb3MgcGFyYSBlbnRvcm5vcyBkb25kZSBlc3RhcyBpbnRlcmZlcmVuY2lhcyBwdWVkYW4gYWZlY3RhciBlbCByZW5kaW1pZW50by4gIAogICAgICAgICAgZGl2KHRpdHVsbz0iQ2FibGVzIGRlIGZpYnJhIMOzcHRpY2EiKQogICAgICAgICAgICBwIE9mcmVjZW4gdW4gbWF5b3IgYW5jaG8gZGUgYmFuZGEgeSBkaXN0YW5jaWFzIGRlIHRyYW5zbWlzacOzbiBzdXBlcmlvcmVzIGEgbG9zIGNhYmxlcyBkZSBjb2JyZSwgcG9yIGxvIHF1ZSBzb24gaWRlYWxlcyBwYXJhIGNvbmV4aW9uZXMgZGUgbGFyZ2EgZGlzdGFuY2lhIHkgYXBsaWNhY2lvbmVzIGRlIGFsdGEgdmVsb2NpZGFkLCBjb21vIHJlZGVzIGRlIGRhdG9zIHkgZW5sYWNlcyBlbnRyZSBlZGlmaWNpb3MuIExvcyBjYWJsZXMgZGUgZmlicmEgw7NwdGljYSBzZSBkaXZpZGVuIGVuOgogICAgICAgICAgICB1bC5saXN0YS11bC5mYS11bC5wcy00CiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuICNbYiBNb25vbW9kb10gKHBhcmEgdHJhbnNtaXNpb25lcyBhIGxhcmdhIGRpc3RhbmNpYSkuCiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuICNbYiBNdWx0aW1vZG9dIChwYXJhIGRpc3RhbmNpYXMgbcOhcyBjb3J0YXMsIGNvbcO6biBlbiByZWRlcyBsb2NhbGVzKS4gICAgICAgICAgICAgIAoKICAgICAgICAgIGRpdih0aXR1bG89IkNhdGVnb3LDrWFzIGRlIGNhYmxlYWRvIChDYXQ1ZSwgQ2F0NiwgQ2F0NmEsIENhdDcsIENhdDgpIikKICAgICAgICAgICAgcCBMYXMgY2F0ZWdvcsOtYXMgZGUgbG9zIGNhYmxlcyBkZSBwYXIgdHJlbnphZG8gZGVmaW5lbiBzdSBjYXBhY2lkYWQgZGUgdHJhbnNtaXNpw7NuIHkgc29uIHVuIGZhY3RvciBwcmVwb25kZXJhbnRlIGVuIGxhIHNlbGVjY2nDs24gZGUgbG9zIGNvbXBvbmVudGVzIHBhcmEgZWwgc2lzdGVtYS4gQ2FkYSBjYXRlZ29yw61hIGVzdMOhIGRpc2XDsWFkYSBwYXJhIHNvcG9ydGFyIGRpZmVyZW50ZXMgYW5jaG9zIGRlIGJhbmRhIHkgZnJlY3VlbmNpYXMuIFBvciBlamVtcGxvOgogICAgICAgICAgICB1bC5saXN0YS11bC5mYS11bC5wcy00CiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIENhdDVlIGVzIGFkZWN1YWRvIHBhcmEgdHJhbnNtaXNpb25lcyBkZSBoYXN0YSAxIEdicHMuCiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIENhdDZhIHkgY2F0ZWdvcsOtYXMgc3VwZXJpb3JlcyBzb3BvcnRhbiBoYXN0YSAxMCBHYnBzLiAKICAgICAgICAgICAgICBwIENvbXByZW5kZXIgbG9zIGRpZmVyZW50ZXMgdGlwb3MgeSBjYXRlZ29yw61hcyBkZSBjYWJsZXMgcGVybWl0ZSBhIGxvcyB0w6ljbmljb3Mgc2VsZWNjaW9uYXIgbG9zIGNvbXBvbmVudGVzIGFkZWN1YWRvcyBzZWfDum4gZWwgYWxjYW5jZSBkZSBsYSBpbnN0YWxhY2nDs24geSBsYXMgbmVjZXNpZGFkZXMgZGUgcmVuZGltaWVudG8gZXNwZWPDrWZpY2FzIGRlIGxhIHJlZC4gICAKCgogICAgU2VwYXJhZG9yIAogICAgI3RfMl8yLnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8KICAgICAgaDIgMi4yIEhlcnJhbWllbnRhcyB5IG1hdGVyaWFsZXMgIAogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAuY29sCiAgICAgICAgcC5tYi0wIEVsIHByb2Nlc28gZGUgaW5zdGFsYWNpw7NuIGRlIGNhYmxlYWRvIGVzdHJ1Y3R1cmFkbyByZXF1aWVyZSBoZXJyYW1pZW50YXMgZXNwZWNpYWxpemFkYXMgeSBtYXRlcmlhbGVzIGRlIGNhbGlkYWQgcXVlIHBlcm1pdGFuIHVuIHRyYWJham8gcHJlY2lzbywgc2VndXJvIHkgY29uZm9ybWUgYSBsYXMgbm9ybWFzIHTDqWNuaWNhcy4gTGEgY29ycmVjdGEgc2VsZWNjacOzbiBkZSBoZXJyYW1pZW50YXMgeSBtYXRlcmlhbGVzIGVzIGZ1bmRhbWVudGFsIHBhcmEgZXZpdGFyIGZhbGxhcyBlbiBsYSBpbnN0YWxhY2nDs24geSBnYXJhbnRpemFyIGxhIGR1cmFiaWxpZGFkIGRlbCBzaXN0ZW1hLgogICAgICAuY29sLWxnLWF1dG8ucHQtbGctMC5wdC1tZC00CiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMTgucG5nJyBhbHQ9JycpICAgCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgIC5jb2wtbGctMTAKICAgICAgICAudGl0dWxvLXNleHRvLmNvbG9yLWFjZW50by1ib3RvbmVzCiAgICAgICAgICBoNSBUYWJsYSAxLiAKICAgICAgICAgIHNwYW4gSGVycmFtaWVudGFzIHkgZGVzY3JpcGNpw7NuCgogICAgICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzLnRleHQtY2VudGVyLm1iLTUKICAgICAgICAgIHRhYmxlCiAgICAgICAgICAgIGNhcHRpb24gRnVlbnRlOiBPSVQsIDIwMjQuCiAgICAgICAgICAgIHRoZWFkCiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRoIEhlcnJhbWllbnRhCiAgICAgICAgICAgICAgICB0aCBGdW5jaW9uYWxpZGFkCiAgICAgICAgICAgICAgICB0aCBWZW50YWphCgogICAgICAgICAgICB0Ym9keQogICAgICAgICAgICAgIHRyCiAgICAgICAgICAgICAgICB0ZC5mYXN0LWJvbGQuYmd0MSBIZXJyYW1pZW50YXMgZGUgY29ydGUgeSB0ZXJtaW5hY2nDs24uCiAgICAgICAgICAgICAgICB0ZCBQYXJhIGxhIGluc3RhbGFjacOzbiBkZSBjYWJsZWFkbyBkZSBwYXIgdHJlbnphZG8geSBmaWJyYSDDs3B0aWNhLCBlcyBuZWNlc2FyaW8gY29udGFyIGNvbiBoZXJyYW1pZW50YXMgZGUgY29ydGUgZXNwZWPDrWZpY2FzLCBjb21vIHRpamVyYXMgZGUgcHJlY2lzacOzbiB5IHBlbGFkb3JhcyBkZSBjYWJsZXMsIHF1ZSBhc2VndXJhbiBjb3J0ZXMgbGltcGlvcyB5IHByZWNpc29zLgogICAgICAgICAgICAgICAgdGQgTGFzIGhlcnJhbWllbnRhcyBkZSB0ZXJtaW5hY2nDs24sIGNvbW8gbGFzIGNyaW1wZWFkb3Jhcywgc2UgZW1wbGVhbiBwYXJhIHJlYWxpemFyIHRlcm1pbmFjaW9uZXMgYWRlY3VhZGFzIGVuIGNvbmVjdG9yZXMgUko0NSB5IGdhcmFudGl6YXIgdW4gY29udGFjdG8gw7NwdGltby4KICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQuZmFzdC1ib2xkLmJndDEgSGVycmFtaWVudGFzIGRlIG1lZGljacOzbiB5IHZlcmlmaWNhY2nDs24uCiAgICAgICAgICAgICAgICB0ZCBQYXJhIGNvbXByb2JhciBxdWUgbGFzIGNvbmV4aW9uZXMgY3VtcGxlbiBjb24gbG9zIGVzdMOhbmRhcmVzIGRlIHJlbmRpbWllbnRvLCBzZSB1dGlsaXphbiBoZXJyYW1pZW50YXMgY29tbyBsb3MgdGVzdGVycyBkZSBjYWJsZXMgeSBsb3MgY2VydGlmaWNhZG9yZXMuCiAgICAgICAgICAgICAgICB0ZCBFc3RhcyBoZXJyYW1pZW50YXMgcGVybWl0ZW4gdmVyaWZpY2FyIHBhcsOhbWV0cm9zIGNvbW8gbGEgY29udGludWlkYWQsIGxhIHJlc2lzdGVuY2lhIHkgZWwgYW5jaG8gZGUgYmFuZGEgZGUgbG9zIGNhYmxlcywgYXNlZ3VyYW5kbyBxdWUgY3VtcGxlbiBjb24gbGFzIGVzcGVjaWZpY2FjaW9uZXMuCiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRkLmZhc3QtYm9sZC5iZ3QxIE1hdGVyaWFsZXMgZGUgc29wb3J0ZSBlIGluc3RhbGFjacOzbi4KICAgICAgICAgICAgICAgIHRkIEluY2x1eWVuIGNhbmFsZXRhcywgYWJyYXphZGVyYXMsIHBhbmVsZXMgZGUgY29uZXhpw7NuIChwYXRjaCBwYW5lbHMpIHkgb3JnYW5pemFkb3JlcyBkZSBjYWJsZXMsIGxvcyBjdWFsZXMgZmFjaWxpdGFuIGxhIGdlc3Rpw7NuIGRlbCBjYWJsZWFkbyBlbiBlbCBsdWdhciBkZSBpbnN0YWxhY2nDs24uCiAgICAgICAgICAgICAgICB0ZCBFbCB1c28gZGUgZXN0b3MgbWF0ZXJpYWxlcyBwZXJtaXRlIHVuIHNpc3RlbWEgbcOhcyBvcmdhbml6YWRvIHkgcmVkdWNlIGVsIHJpZXNnbyBkZSBkYcOxbyBvIGludGVyZmVyZW5jaWFzIGVuIGxvcyBjYWJsZXMuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgIFNlcGFyYWRvciAKICAgICN0XzJfMy50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIGgyIDIuMyBQcm9jZWRpbWllbnRvcyBkZSBpbnN0YWxhY2nDs24KCiAgICBwIEVsIHByb2Nlc28gZGUgaW5zdGFsYWNpw7NuIGRlIGNhYmxlYWRvIGVzdHJ1Y3R1cmFkbyBpbmNsdXllIHVuYSBzZXJpZSBkZSBwcm9jZWRpbWllbnRvcyBxdWUgZGViZW4gc2VyIGVqZWN1dGFkb3MgZGUgbWFuZXJhIHByZWNpc2EgeSBvcmRlbmFkYSBwYXJhIGN1bXBsaXIgY29uIGxhcyBub3JtYXRpdmFzIHkgZ2FyYW50aXphciBsYSBmdW5jaW9uYWxpZGFkIHkgc2VndXJpZGFkIGRlbCBzaXN0ZW1hLiBFc3RvcyBwcm9jZWRpbWllbnRvcyBjdWJyZW4gZGVzZGUgbGEgcGxhbmlmaWNhY2nDs24gaGFzdGEgbGEgaW1wbGVtZW50YWNpw7NuIGbDrXNpY2EgeSBsYSB2ZXJpZmljYWNpw7NuIGZpbmFsLiAKCiAgICAucm93LmJnNS5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAucHgtbGctNS5weC00CiAgICAgICAgLmJndy5icmFkLnAtNS5teS01CiAgICAgICAgICBTbHlkZXJBKHRpcG89ImIiKQogICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgICAgICAuY29sLWxnLTYubXktMgogICAgICAgICAgICAgICAgaDUubWItNCBQbGFuaWZpY2FjacOzbiB5IGRpc2XDsW8gZGVsIGNhYmxlYWRvOiAKICAgICAgICAgICAgICAgIHAgTGEgaW5zdGFsYWNpw7NuIGNvbWllbnphIGNvbiB1bmEgZmFzZSBkZSBwbGFuaWZpY2FjacOzbiBlbiBsYSBxdWUgc2UgY29uc2lkZXJhbiBsYXMgbmVjZXNpZGFkZXMgZGVsIGNsaWVudGUsIGxhIGRpc3RyaWJ1Y2nDs24gZGVsIGVzcGFjaW8sIHkgbGEgdWJpY2FjacOzbiBkZSBsb3MgZGlzcG9zaXRpdm9zIGRlIHJlZCB5IHRlbGVjb211bmljYWNpb25lcy4gRHVyYW50ZSBlc3RhIGV0YXBhLCBzZSBlbGFib3JhIHVuIHBsYW4gcXVlIGRlZmluZSBsYSBkaXNwb3NpY2nDs24gZGVsIGNhYmxlYWRvLCBsb3MgcHVudG9zIGRlIGNvbmV4acOzbiwgeSBsYXMgcnV0YXMgZGUgaW5zdGFsYWNpw7NuLiBFcyBpbXBvcnRhbnRlIHRvbWFyIGVuIGN1ZW50YSBsYSBlc3RydWN0dXJhIGRlbCBlZGlmaWNpbyB5IHBvc2libGVzIG9ic3TDoWN1bG9zLCBjb21vIHBhcmVkZXMgbyBjb2x1bW5hcy4KICAgICAgICAgICAgICAuY29sLWxnLTUubXktMiAKICAgICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzIwLnBuZycsIGFsdD0nJykgIAoKICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAgICAgLmNvbC1sZy02Lm15LTIKICAgICAgICAgICAgICAgIGg1Lm1iLTQgSW5zdGFsYWNpw7NuIGRlIGxvcyBjYWJsZXMgeSBjb21wb25lbnRlczogCiAgICAgICAgICAgICAgICBwIEVzdGUgcHJvY2VkaW1pZW50byBpbXBsaWNhIGVsIHRlbmRpZG8gZGUgbG9zIGNhYmxlcywgbGEgaW5zdGFsYWNpw7NuIGRlIGNhbmFsZXRhcyBvIHR1YmVyw61hcyBwYXJhIHByb3RlZ2VyIGVsIGNhYmxlYWRvLCB5IGxhIGNvbmV4acOzbiBkZSBsb3MgY29tcG9uZW50ZXMsIGNvbW8gcGFuZWxlcyBkZSBjb25leGnDs24sIHRvbWFzIGRlIHJlZCB5IHB1bnRvcyBkZSBhY2Nlc28uIFNlIGRlYmVuIHNlZ3VpciBsYXMgcHLDoWN0aWNhcyByZWNvbWVuZGFkYXMgcGFyYSBldml0YXIgY3VydmFzIGNlcnJhZGFzIHkgdGVuc2lvbmVzIGVuIGxvcyBjYWJsZXMsIGxvIGN1YWwgcG9kcsOtYSBhZmVjdGFyIHN1IHJlbmRpbWllbnRvLgogICAgICAgICAgICAgIC5jb2wtbGctNS5teS0yIAogICAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMjEucG5nJywgYWx0PScnKSAgCgogICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgICAgICAuY29sLWxnLTYubXktMgogICAgICAgICAgICAgICAgaDUubWItNCBDb25leGnDs24geSBldGlxdWV0YWRvOiAKICAgICAgICAgICAgICAgIHAgQ2FkYSBjb25leGnDs24gZGViZSByZWFsaXphcnNlIGRlIGFjdWVyZG8gY29uIGxhcyBub3JtYXMgZGUgY29sb3IgeSB0ZXJtaW5hY2nDs24gZXNwZWNpZmljYWRhcyBlbiBsb3MgZXN0w6FuZGFyZXMgKGNvbW8gVElBL0VJQSksIHkgZXMgZnVuZGFtZW50YWwgZXRpcXVldGFyIGNvcnJlY3RhbWVudGUgbG9zIHB1bnRvcyBkZSBjb25leGnDs24gcGFyYSBmYWNpbGl0YXIgbGEgaWRlbnRpZmljYWNpw7NuIHkgZWwgbWFudGVuaW1pZW50byBmdXR1cm8uCiAgICAgICAgICAgICAgLmNvbC1sZy01Lm15LTIgCiAgICAgICAgICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8yMi5wbmcnLCBhbHQ9JycpICAKCiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgICAgIC5jb2wtbGctNi5teS0yCiAgICAgICAgICAgICAgICBoNS5tYi00IFBydWViYXMgZGUgY2VydGlmaWNhY2nDs24geSB2ZXJpZmljYWNpw7NuOiAKICAgICAgICAgICAgICAgIHAgVW5hIHZleiBjb21wbGV0YWRhIGxhIGluc3RhbGFjacOzbiwgZXMgbmVjZXNhcmlvIHJlYWxpemFyIHBydWViYXMgcGFyYSB2ZXJpZmljYXIgcXVlIGVsIHNpc3RlbWEgY3VtcGxlIGNvbiBsb3MgZXN0w6FuZGFyZXMgZGUgcmVuZGltaWVudG8uIExhcyBwcnVlYmFzIGRlIGNlcnRpZmljYWNpw7NuIGluY2x1eWVuIGxhIHZlcmlmaWNhY2nDs24gZGUgY29udGludWlkYWQsIHJlc2lzdGVuY2lhIHkgZGlhZm9uw61hIChjcm9zc3RhbGspIGVuIGxvcyBjYWJsZXMgZGUgY29icmUsIGFzw60gY29tbyBwcnVlYmFzIGRlIGFuY2hvIGRlIGJhbmRhIGVuIGxhcyBpbnN0YWxhY2lvbmVzIGRlIGZpYnJhIMOzcHRpY2EuIFNvbG8gZGVzcHXDqXMgZGUgcXVlIGVsIHNpc3RlbWEgcGFzYSB0b2RhcyBsYXMgcHJ1ZWJhcyBkZSBjZXJ0aWZpY2FjacOzbiwgc2UgY29uc2lkZXJhIGxpc3RhIHBhcmEgc2VyIHB1ZXN0YSBlbiBvcGVyYWNpw7NuLgogICAgICAgICAgICAgIC5jb2wtbGctNS5teS0yIAogICAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMjMucG5nJywgYWx0PScnKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgIC5jb2wtbGctMTAKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYmcxLnAtNC5icmFkCiAgICAgICAgICAuY29sLWxnLWF1dG8uajEKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMjQucG5nJyBhbHQ9JycpCiAgICAgICAgICAuY29sLnB0LWxnLTAucHQtbWQtNC5qMQogICAgICAgICAgICBwLm1iLTAgSW1wbGVtZW50YXIgcHJvY2VkaW1pZW50b3MgZGUgaW5zdGFsYWNpw7NuIGJpZW4gZXN0cnVjdHVyYWRvcyBhc2VndXJhIHF1ZSBlbCBjYWJsZWFkbyBlc3RydWN0dXJhZG8gdGVuZ2EgdW4gcmVuZGltaWVudG8gw7NwdGltbywgc2VhIHNlZ3VybyB5IHBlcm1pdGEgdW5hIGbDoWNpbCBhbXBsaWFjacOzbiBvIG1vZGlmaWNhY2nDs24gZW4gZWwgZnV0dXJvLgoK"},null]}